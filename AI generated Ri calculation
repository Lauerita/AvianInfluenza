import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate

# Time array - only need start and end for solve_ivp
t_span = (0, 365)

# Constants
omega = 2 * np.pi / 365

# Parameters - placed together for clarity
gamma_1 = 0.14
gamma_2 = 0.058
p_1 = 10 ** 6.4
p_2 = 1e4
d = 0.1 / 365
Lambda = 2
beta_d1 = 2.24e-9
beta_i1 = 3.55e-9
beta_d2 = 2.24e-7
beta_i2 = 3.55e-7

# Precompute constant parts of matrices
V_constant = np.array([
    [gamma_1 + d, 0, 0, 0, 0, 0],
    [0, gamma_2 + d, 0, 0, 0, 0],
    [0, 0, gamma_2 + d, 0, 0, 0],
    [0, 0, 0, gamma_1 + d, 0, 0],
    [-p_1, 0, 0, -p_1, 0, 0],
    [0, -p_2, -p_2, 0, 0, 0]
], dtype=float)

Lambda_over_d = Lambda / d
F_t = np.array([
    [beta_d1 * Lambda_over_d, 0, 0, beta_d1 * Lambda_over_d, beta_i1 * Lambda_over_d, 0],
    [0, beta_d2 * Lambda_over_d, beta_d2 * Lambda_over_d, 0, 0, beta_i2 * Lambda_over_d],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0]
], dtype=float)

# Temperature function
def T(t, a=5.73):
    return a * (1 + 1.91 * np.sin(omega * t + 92.3))

# Define time-dependent Omega functions
def Omega_1(temp):
    return 105.84 * np.exp(0.08 * temp)

# Parameter space
a_var = np.linspace(50, 200, 21)
b_var = np.linspace(0.01, 0.5, 21)
theta = np.linspace(1, 10, 201)

# Initial condition (identity matrix)
Y = np.eye(6)

# Result storage
theta_values = np.zeros((len(a_var), len(b_var)))

# Main computation loop
for n, a in enumerate(a_var):
    for m, b in enumerate(b_var):
        # Define the Omega_2 function with current parameters
        def Omega_2(temp):
            return a * np.exp(b * temp)
        
        # Define V matrix for current parameters
        def V_t(t):
            temp = T(t, a=5.73)
            omega1 = Omega_1(temp)
            omega2 = Omega_2(temp)
            
            # Create a copy of the constant part
            V = V_constant.copy()
            # Only update the time-dependent elements
            V[4, 4] = omega1
            V[5, 5] = omega2
            
            return V
        
        # Binary search to find theta more efficiently
        left, right = 0, len(theta) - 1
        found = False
        
        while left <= right and not found:
            mid = (left + right) // 2
            theta_current = theta[mid]
            
            # Define system for current theta
            def dwdt(t, w):
                V = V_t(t)
                return np.dot((-V + F_t/theta_current), w)
            
            # Process all columns of identity matrix at once
            Wmatrix = np.zeros((6, 6))
            
            for i in range(6):
                sol = integrate.solve_ivp(
                    dwdt, 
                    t_span, 
                    Y[:, i], 
                    method='BDF',
                    max_step=1.0,
                    rtol=1e-4,  # Adjust tolerance for better performance
                    atol=1e-6
                )
                Wmatrix[:, i] = sol.y[:, -1]
            
            # Calculate eigenvalues
            eigenvalues = np.linalg.eigvals(Wmatrix)
            Emax = np.max(np.abs(eigenvalues))
            
            if 0.95 <= Emax <= 1.05:
                theta_values[n, m] = theta_current
                print(f"For a={a}, b={b}: Found theta: {theta_current} with Emax: {Emax}")
                found = True
            elif Emax < 0.95:
                right = mid - 1  # Need smaller theta
            else:
                left = mid + 1   # Need larger theta
        
        if not found:
            # If we didn't find a value in range, try linear search as fallback
            for theta_current in theta:
                def dwdt(t, w):
                    V = V_t(t)
                    return np.dot((-V + F_t/theta_current), w)
                
                Wmatrix = np.zeros((6, 6))
                for i in range(6):
                    sol = integrate.solve_ivp(
                        dwdt, 
                        t_span, 
                        Y[:, i], 
                        method='BDF',
                        max_step=1.0
                    )
                    Wmatrix[:, i] = sol.y[:, -1]
                
                eigenvalues = np.linalg.eigvals(Wmatrix)
                Emax = np.max(np.abs(eigenvalues))
                
                if 0.95 <= Emax <= 1.05:
                    theta_values[n, m] = theta_current
                    print(f"For a={a}, b={b}: Found theta: {theta_current} with Emax: {Emax}")
                    break

# Visualization
plt.figure(figsize=(10, 8))
masked_theta_values = np.ma.masked_where(theta_values == 0, theta_values)  # Mask zeros instead of NaN
plt.pcolormesh(b_var, a_var, masked_theta_values, cmap='viridis', shading='auto')
plt.colorbar(label='Threshold Value (Î¸)')
plt.xlabel('b parameter')
plt.ylabel('a parameter')
plt.title('Threshold Values for Different Parameter Combinations')
plt.tight_layout()
plt.show()
